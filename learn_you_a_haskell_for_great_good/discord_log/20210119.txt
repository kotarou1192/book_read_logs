実行環境確認できたので、1章から全部読みなおすぞお

たかし — 2022/01/16
リスト内包表記懐かしいな
[19:30]
今見るとなんか違って見えるのがおもしろい。用途を思いつくからだと思われる

たかし — 2022/01/16
第2章読んだ。
型クラスとかそのインスタンスって言ってるけど、クラスとかインスタンスって概念が純粋関数型にもあるん？？っていう疑問が残った。
属してるものの集合の名前ってイメージだった。

たかし — 2022/01/16
第4章まで読み終わった
[20:41]
昔読んだときだいぶ時間かかった気がするのにな
[20:42]
再帰関数とかリストとかよく分かってなかったから読むのに時間かかったんだろうな
[20:43]
5章はカリー化の話が出てくるのでこの辺りもすでに知ってそう。昔読んだとき「何なんこれ？」みたいな気持ちだった気がする。
[20:49]
引数を複数取る関数を引数を一つとる関数だけで表現できるの強い
[20:50]
いうてほかの言語でもよく使うから、いろんなもの触った後だとなるほどなあってなるんだろな。

たかし — 2022/01/16
何でもかんでも関数で表せるのはカリー化のおかげだなと思ってたのが、久々に読んだらその通りになってて安心した。

たかし — 2022/01/16
5章まで読み終わるのにかかったのは何分だろ
[21:38]
170分弱だ
[21:39]
この辺りまでは、今となっては他の言語とあんまり変わらんのよなあ。
[21:40]
他言語がいい感じにこのあたり取り込んでるなあって思う。
[21:41]
他言語でも自動で完全にカリー化できるんだろうか？
[21:43]
する意味がないんだろうな。。
sum' = foldr (+) 0

みたいにRubyでは書けない気がする。いや、proc使ったら書けるのかな (編集済)

たかし — 2022/01/16
上みたいな挙動してくれるRubyの関数を考えよう
[21:58]
それっぽいことできたけどやってることがちがう
[22:03]
出来ねえなあと思ってリファレンス見てたら標準ライブラリにcurryってのがあってワロタ

たかし — 2022/01/16
これは俺が本当にやりたかったことなんだろうか
[22:38]
add_each = Proc.new { |a, b| a + b }
sum = add_each.curry
[1,2,3,4].inject(&sum)
[22:39]
これ一応動くけど、それなら[1,2,3,4].sumでよくなみもふたもないこと思ってしまった (編集済)
[22:43]
なんか複雑な事繰り返したかったらこれでいいのかなと一瞬思ったけど、それなら
[1,2,3,4].inject(0) do |result, num|
  # do something
  # e.g
  # result + num
end

これでdo-endのなかで好きなことやればいいやんと思ってしまった
[22:45]
それ考えだしたら身も蓋も無いからやめよう (編集済)
[22:45]
変換さん…
[22:46]
Google日本語入力にしても勝手にMicrsoftIMEに戻るのやめてくれ
[22:50]
Haskellの本読むよりRubyでこんな変なことするほうがよっぽど疲れる
[22:56]
純粋なオブジェクト指向はつかいやすいなあっていう小学生みたいな感想しか出てこない
[22:58]
GCD求める関数がきれいに書けたりするのいいなあと思いました
greatestCommonDivisor :: Int -> Int -> Int
greatestCommonDivisor x y
    |x `mod` y == 0 = y
    |otherwise = greatestCommonDivisor y (x `mod` y)
[22:59]
もうちょい簡単にかけるんだろうか？
2022年1月17日

たかし — 2022/01/17
Int -> ( Int -> Int )

たかし — 2022/01/17
試験が21日に決まった。
Haskellやってる場合じゃないのでは？？？

たかし — 2022/01/17
今日はMySQLの実行環境度よさげなドキュメントを見つけて、残りはHaskellに使おう

たかし — 2022/01/17
SQLで遊んでて気づいたらこんな時間に。ガシガシいじりながら遊べて楽しかった。
[23:33]
スカラサブクエリとか忘れてた。スレチなのでこの辺りで〆。
2022年1月18日

たかし — 昨日 15:53
読まないと母に3万、読まなくても母に3万
[15:54]
読むしかない
[15:54]
読まないとと読んでもって対応関係にないのにそれっぽく見えるぼくの脳バグってる
[15:55]
あれだ、やるって決めたら腰を据えないと永遠に進まないから背水の陣的なことやったんだった。
[15:56]
読み始めるまでが苦痛で、いざ読みだすと面白がってすぐ読み終わるはずなので、とりあえずごちゃごちゃ言わずに読もうか。

たかし — 昨日 16:14
遅延評価、計算量が減る代わりにメモリ消費量が増えるっていうトレードオフがあった
[16:17]
スタックに詰め込んでいくからそれはそうだなあって言う。
再帰しすぎるとスタックオーバーフローはよく起きる
[16:17]
超でっかい木構造を再帰関数で深さ優先探索とかやると辛いことが起きる
[16:23]
すごHのコードたまに無駄なところがあるの、読者に気づいてもらうためにわざと無駄なの書いてるのかもな。
[16:29]
すごH曰く
findKey :: (Eq k) => k -> [(k, v)] -> Maybe v
findKey key xs = foldr (\(k, v) acc -> if key == k then Just v else acc) Nothing xs

このコードじみに無駄がある
[16:30]
同じ呼び出し方するなら
findKey key = foldr(\(k, v) acc -> if key == k then Just v else acc) Nothing

これでいい
[16:31]
気付くかな？的な感じでわざとやってそう。気付かれたら多分ニヤニヤするんだと思う。
[16:31]
全部カリー化されてるっていう意識がないと無駄な引数書きがち

たかし — 昨日 17:46
6章まで読み終わった
[17:47]
モジュール作れるようになった

たかし
すごH曰く findKey :: (Eq k) => k -> [(k, v)] -> Maybe v findKey key xs = foldr (\(k, v) acc -> if key == k then Just v else acc) Nothing xs このコードじみに無駄がある

たかし — 昨日 18:00
Haskellのリンター使ったらこのコード怒られる。。
勝手に下のコードになるので、まじでわざと書いてるんだと思う。
[18:00]
どうしてもうちょいスマートに書かないん？みたいなあおりを受ける
[18:01]
Haskell書ける人でリンター使わない人ほぼいないはず。
[18:01]
jsとかPythonならよく見かける。

たかし — 昨日 18:46
なんかTypeScriptのにおいがしてきた
[18:46]
そんなはずはない…HaskellがTypeScriptと同じような型システムだなんてそんな (編集済)
[18:49]
一通り学んだら三目並べ作ってみるか
[18:49]
インターフェースがオブジェクト指向だけのものではないってのが分かったのでよかった
[18:50]
クラスとかインスタンスの概念もある
[18:51]
なお、オブジェクト指向のクラスはAさんとBさんがいるクラス（1年1組とか2組とかのインスタンスになる）を作るのに対して、HaskellのクラスはAさんは入学できるのでクラスに入ることができるよなあみたいな感じらしい。
[18:52]
クラスを考えて人を集めるか、人を考えてクラスを作るかの違い？みたいな
[18:53]
Haskellさん、型はドキュメントな派閥っぽいにおいがプンプンしてきた
[18:53]
型シノニムを与えるあたり、まじでドキュメントっぽい。
[18:54]
何でもかんでもstringだったら何の文字列なのか分かりにくいから型シノニムつけるっていう思想はまだ大丈夫だ。拒否反応はまだ低い。
[18:59]
7章でHaskellは型をドキュメントとして扱い、かつ、型が予想できるので安全っていうことが分かった。
[19:00]
オブジェクト指向との思想の違いを感じる。変数名で何かを教えるんじゃなくて、型名で引数やらデータが何なのかを教えてるっぽい。
[19:03]
型できるだけ書かないのが好きだなあ。でもそうすると型安全じゃなくなるんだろうなあ。ランタイムエラーが増えるんだろうなあ。

たかし — 昨日 21:48
Haskellの中身ほんま想像できない
[21:48]
再帰しすぎてて、どうやって実装されてるのか分からん。。
[21:48]
遅延評価じゃないとこんなことできない
[21:49]
Rubyとかみたいな一般的な言語でやったらすぐオーバーフローすることを平気でできてる
[21:50]
最終的な評価ではなく、aとbっていう数の違いが分かればいいので、a, b, c, d...みたいに続く数でもa, bまでで評価留めるおかげでこういうことできてる。
[21:50]
例えば == と \= の定義が相互再帰してるのとかまさにその仕組み使ってる。 (編集済)
[21:51]
== の結果は \= の逆で、\= の結果は == の逆って定義しただけで動くのキモっってなった。

たかし — 昨日 22:14
マジでこんな抽象的な言語よく実装出来てるな…

たかし — 昨日 22:29
全部カリー化されてるのは伊達じゃないな
[22:30]
大体の場合引数が1つ足りない状態になってて、そこに入れられるものの型が確定した時点で結果の型も確定する感じ
[22:30]
型も関数も何もかも関数
[22:30]
抽象的すぎて怖い

たかし — 昨日 22:45
オブジェクト指向よりプログラミングの概念で遊んでる感じがする
[22:51]
カリー化されてるから何でもかんでも引数減らせて、最終的に引数1つが必要な関数に変換できるっていう概念で遊びすぎ
[22:52]
使いこなすの難しいでしょ…そりゃ流行らんわというか流行れないわ…難しすぎると思う
[22:52]
数学好きな人か、プログラミング慣れてる人じゃないと扱えなさそう
[22:56]
とりあえず7章まで読み終わった
[22:58]
I/O周りが9章からはじまって、ファンクターなものをやった後モナドに入るみたい
[23:00]
ファンクターは例えば[1, 2, 3, [4, 5], [6, [7, 8]]]みたいな感じの何か。RubyだとEnumerableみたいな何か。
[23:03]
型は
種類 { 型 { 値 } }
みたいな対応関係らしい。数字とか文字列は比較可能だよね―みたいな、だったらEqとかのクラスに属してるよね―みたいな、それってこういう種類だよね―みたいなことらしい。
[23:04]
楽しすぎて1日つぶしそうなので今日はここで切り上げてJSに戻る
